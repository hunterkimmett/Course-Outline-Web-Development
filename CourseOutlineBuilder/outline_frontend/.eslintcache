[{"/Users/hunterkimmett/Documents/Grad School/ENSF607/WebDev/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/index.js":"1","/Users/hunterkimmett/Documents/Grad School/ENSF607/WebDev/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/reportWebVitals.js":"2","/Users/hunterkimmett/Documents/Grad School/ENSF607/WebDev/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/App.js":"3","/Users/hunterkimmett/Documents/Grad School/ENSF607/WebDev/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/Dashboard.js":"4","/Users/hunterkimmett/Documents/Grad School/ENSF607/WebDev/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/Outline.js":"5"},{"size":500,"mtime":1610703765989,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1610703765990,"results":"8","hashOfConfig":"7"},{"size":572,"mtime":1610703765988,"results":"9","hashOfConfig":"7"},{"size":11575,"mtime":1610703765989,"results":"10","hashOfConfig":"7"},{"size":64314,"mtime":1610703765993,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ql2knh",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/hunterkimmett/Documents/Grad School/ENSF607/WebDev/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/index.js",[],"/Users/hunterkimmett/Documents/Grad School/ENSF607/WebDev/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/reportWebVitals.js",[],["25","26"],"/Users/hunterkimmett/Documents/Grad School/ENSF607/WebDev/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/App.js",[],"/Users/hunterkimmett/Documents/Grad School/ENSF607/WebDev/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/Dashboard.js",["27","28","29"],"import React, { useEffect, useState } from 'react';\nimport { Button, ButtonGroup } from '@material-ui/core';\nimport { TableRow, TableCell, TableContainer, TableHead, TableBody, Table } from '@material-ui/core';\nimport { Grid, Box } from '@material-ui/core';\nimport { TextField } from '@material-ui/core';\nimport { Dialog, DialogTitle, DialogContent, DialogActions } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core'\nimport { Paper } from '@material-ui/core';\nimport axios from 'axios';\nimport { AppBar, Toolbar } from '@material-ui/core';\nimport { useHistory } from 'react-router';\n\nconst useStyles = makeStyles({\n  toolbarButtons: {\n    marginLeft: 'auto',\n  },\n})\n\nconst baseUrl = \"http://localhost:8000/\";\n\nfunction OutlineTable(props) {\n\n  const { outlines, itemSelected, setItemSelected } = props;\n\n  const handleSelection = (e, index) => {\n    if (itemSelected === index) {\n      setItemSelected(null);\n    }\n    else {\n      setItemSelected(index);\n    }\n  };\n\n  let isSelected = (index) => itemSelected === index;\n\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Course Faculty</TableCell>\n            <TableCell align=\"left\">Course Number</TableCell>\n            <TableCell align=\"left\">Term</TableCell>\n            <TableCell align=\"left\">Section</TableCell>\n            <TableCell align=\"left\">Description</TableCell>\n            <TableCell align=\"left\">Date Created</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {outlines.map((row, index) => (\n            <TableRow key={index}\n              onClick={(e) =>\n                handleSelection(e, index)}\n              hover role=\"checkbox\"\n              selected={isSelected(index)}>\n              <TableCell>\n                {row.faculty}\n              </TableCell>\n              <TableCell align=\"left\">{row.number}</TableCell>\n              <TableCell align=\"left\">{row.term}</TableCell>\n              <TableCell align=\"left\">{row.section}</TableCell>\n              <TableCell align=\"left\">{row.description}</TableCell>\n              <TableCell align=\"left\">{row.date_created}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table >\n    </TableContainer >\n  );\n}\n\nfunction CreateFormDialog({ open, handleCreateClose, outlines, setOutlines }) {\n\n  const [faculty, setFaculty] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const [term, setTerm] = useState(\"\");\n  const [section, setSection] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  const postOutline = async (outline) => {\n    try {\n      axios.post(`${baseUrl}outlines/`, {\n        faculty: outline.faculty,\n        number: outline.number,\n        term: outline.term,\n        section: outline.section,\n        description: outline.description,\n        date_created: outline.date_created\n      }).then(response => {\n        console.log(`posted outline ${response.data.id} to backend`);\n        addOutline(response.data)\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const addOutline = (outline) => {\n    let _outlines = [...outlines]\n    _outlines.push(outline)\n    setOutlines(_outlines)\n  }\n\n  const handleCreate = () => {\n\n    console.log(\"handling outline creation...\");\n\n    const today = new Date();\n    const day = (\"0\" + (today.getDate())).slice(-2);\n    const month = (\"0\" + (today.getMonth() + 1)).slice(-2);\n    const year = today.getFullYear();\n    const date = `${year}-${month}-${day}`;\n\n    const outline_fields = { faculty: faculty, number: number, term: term, section: section, description: description, date_created: date }\n\n    console.log(\"creating outline...\")\n    postOutline(outline_fields)\n    handleCreateClose()\n\n  }\n\n  return (\n    <Dialog open={open}>\n      <DialogTitle>\n        Create New Outline\n      </DialogTitle>\n      <DialogContent>\n        <Grid container>\n          <Grid container>\n            <Grid item xs>\n              <TextField label='Faculty' onChange={e => setFaculty(e.target.value)} />\n            </Grid>\n            <Grid item xs>\n              <TextField label='Number' onChange={e => setNumber(e.target.value)} />\n            </Grid>\n          </Grid>\n          <Grid container>\n            <Grid item xs>\n              <TextField label='Term' onChange={e => setTerm(e.target.value)} />\n            </Grid>\n            <Grid item xs>\n              <TextField label='Section' onChange={e => setSection(e.target.value)} />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Box>\n          <TextField label='Description' fullWidth onChange={e => setDescription(e.target.value)} />\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleCreateClose} color=\"primary\">\n          Cancel\n        </Button>\n        <Button color=\"primary\" onClick={handleCreate}>\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction EditFormDialog({ open, handleEditClose, outlines, setOutlines, itemSelected }) {\n\n  const [faculty, setFaculty] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const [term, setTerm] = useState(\"\");\n  const [section, setSection] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  useEffect(() => {\n    if (outlines[itemSelected] != null) {\n      setFaculty(outlines[itemSelected].faculty)\n      setNumber(outlines[itemSelected].number)\n      setTerm(outlines[itemSelected].term)\n      setSection(outlines[itemSelected].section)\n      setDescription(outlines[itemSelected].description)\n    }\n  }, [open])\n\n  const putOutline = async () => {\n    try {\n      console.log(\"entering edit block\")\n      axios.put(`${baseUrl}outlines/${outlines[itemSelected].id}/`, {\n        faculty: faculty,\n        number: number,\n        term: term,\n        section: section,\n        description: description,\n        date_created: outlines[itemSelected].date_created\n      }).then(response => {\n        console.log(`put outline ${response.data.id} to backend`);\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const handleConfirm = () => {\n    console.log(\"handling outline editing...\");\n    putOutline();\n    let arr = [...outlines]\n    arr[itemSelected] = {\n      id: outlines[itemSelected].id,\n      faculty: faculty,\n      number: number,\n      term: term,\n      section: section,\n      description: description,\n      date_created: outlines[itemSelected].date_created\n    }\n    setOutlines(arr);\n    handleEditClose();\n  }\n\n  return (\n    <Dialog open={open}>\n      <DialogTitle>\n        Edit Outline\n      </DialogTitle>\n      <DialogContent>\n        <Grid container>\n          <Grid container>\n            <Grid item xs>\n              <TextField label='Faculty' onChange={e => setFaculty(e.target.value)}\n                value={faculty} />\n            </Grid>\n            <Grid item xs>\n              <TextField label='Number' onChange={e => setNumber(e.target.value)}\n                value={number} />\n            </Grid>\n          </Grid>\n          <Grid container>\n            <Grid item xs>\n              <TextField label='Term' onChange={e => setTerm(e.target.value)}\n                value={term} />\n            </Grid>\n            <Grid item xs>\n              <TextField label='Section' onChange={e => setSection(e.target.value)}\n                value={section} />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Box>\n          <TextField label='Description' fullWidth onChange={e => setDescription(e.target.value)}\n            defaultValue={description} />\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleEditClose} color=\"primary\">\n          Cancel\n        </Button>\n        <Button color=\"primary\" onClick={handleConfirm}>\n          Confirm\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction MenuBar(props) {\n\n  const { handleCreateOpen, handleOpen, handleDelete, handleEdit } = props\n\n  const classes = useStyles()\n\n  return (\n    <AppBar position='static'>\n      <Toolbar>\n        <Box paddingLeft={2}>\n          <h1>\n            Course Outline Builder\n        </h1>\n        </Box>\n        <Box paddingRight={5} className={classes.toolbarButtons}>\n          <ButtonGroup variant=\"contained\" color=\"secondary\" aria-label=\"outlined primary button group\">\n            <Button onClick={handleCreateOpen}>Create </Button>\n            <Button onClick={handleEdit}>Edit</Button>\n            <Button onClick={handleOpen}>Open </Button>\n            <Button onClick={handleDelete}>Delete</Button>\n\n          </ButtonGroup>\n        </Box>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nfunction Dashboard() {\n\n  const createOutline = (id, faculty, number, term, section, description) => {\n    return { id, faculty, number, term, section, description }\n  }\n\n  const [outlines, setOutlines] = useState([])\n  const [open, setCreateOpen] = useState(false);\n  const [itemSelected, setItemSelected] = useState();\n  const [editOpen, setEditOpen] = useState(false);\n\n  useEffect(() => {\n    console.log('loading outlines from backend...')\n    getOutlines();\n\n  }, [])\n\n  useEffect(() => {\n    console.log(itemSelected)\n    console.log(outlines[itemSelected])\n  }, [itemSelected])\n\n  const getOutlines = async () => {\n    try {\n      axios.get(`${baseUrl}outlines/`)\n        .then((response) => setOutlines(response.data));\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const deleteOutline = async (id) => {\n    try {\n      axios.delete(`${baseUrl}outlines/${id}/`)\n      console.log(`deleted outline ${id} from backend`)\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  const handleCreateOpen = () => setCreateOpen(true);\n  const handleCreateClose = () => setCreateOpen(false);\n  const handleEditOpen = () => setEditOpen(true);\n  const handleEditClose = () => setEditOpen(false);\n\n  const handleDelete = () => {\n    if (itemSelected >= 0 && itemSelected < outlines.length) {\n      deleteOutline(outlines[itemSelected].id)\n      let _outlines = [...outlines];\n      _outlines.splice(itemSelected, 1);\n      setOutlines(_outlines);\n    }\n  }\n\n  const handleOpen = () => {\n    if (itemSelected >= 0 && itemSelected < outlines.length && outlines[itemSelected] != null) {\n      const outlineID = outlines[itemSelected].id\n      console.log(`opening outline ${outlineID} ...`)\n      goToOutline(outlineID)\n    } \n  }\n\n  const handleEdit = () => {\n    if (itemSelected >= 0 && itemSelected < outlines.length && outlines[itemSelected] != null) {\n      const outlineID = outlines[itemSelected].id\n      console.log(`editing outline ${outlineID} ...`)\n      handleEditOpen()\n    } \n  }\n\n  const history = useHistory();\n\n  const goToOutline = (id) => {\n    //pushes data to Outline component on click\n    history.push('/outline', { outlineID: id })\n  }\n\n  return (\n    <div className=\"Dashboard\">\n\n      <MenuBar handleCreateOpen={handleCreateOpen} handleOpen={handleOpen} handleDelete={handleDelete} handleEdit={handleEdit} />\n      <Box paddingTop={20}>\n        <OutlineTable outlines={outlines} itemSelected={itemSelected} setItemSelected={setItemSelected} />\n      </Box>\n      <CreateFormDialog open={open} handleCreateClose={handleCreateClose} goToOutline={goToOutline} outlines={outlines} setOutlines={setOutlines} />\n      <EditFormDialog open={editOpen} handleEditClose={handleEditClose} goToOutline={goToOutline} outlines={outlines} setOutlines={setOutlines} itemSelected={itemSelected} />\n\n    </div >\n\n  );\n}\n\nexport default Dashboard;\n","/Users/hunterkimmett/Documents/Grad School/ENSF607/WebDev/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/Outline.js",["30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80"],"import React from 'react';\nimport { useState, useEffect } from \"react\";\nimport { ButtonGroup } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Box from '@material-ui/core/Box';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Grid from '@material-ui/core/Grid'\nimport { Dialog, DialogTitle, DialogContent, DialogActions, makeStyles } from '@material-ui/core';\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nexport default Outline;\n\n\nconst useStyles = makeStyles((theme) => ({\n    background: {\n        color: 'primary'\n    },\n    toolbarButtons: {\n        marginLeft: 'auto',\n    }\n\n}));\n\nconst baseUrl = 'http://localhost:8000/';\n\nfunction Outline() {\n\n    const classes = useStyles;\n\n    // Getting the outlint rest Url.\n    const location = useLocation();\n    const [outlineID, setOutlineID] = useState(location.state.outlineID);\n    const [outline, setOutline] = useState({});\n\n    const getOutline = async () => {\n        try {\n            axios.get(`${baseUrl}outlines/${outlineID}/`)\n                .then((response) => setOutline(response.data));\n\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    // Initial render use effect\n    useEffect(() => {\n        console.log(`outline ${outlineID} has been opened...`);\n        console.log('loading outline from backend...');\n        getOutline();\n    }, [])\n\n    // Save states\n    const handleSaveOpen = () => setSave(true);\n    const handleSaveClose = () => setSave(false);\n    const [save, setSave] = useState(false);\n\n    const handleSave = () => {\n        console.log('saving...');\n        handleSaveOpen()\n    };\n\n    return (\n\n        <div className=\"Outline\">\n            <MenuBar handleSaveOpen={handleSaveOpen} handleSave={handleSave} />\n            <Grid container justify='center' align='center'>\n                <Box alignItems='center' justifyContent='center' width={0.95}>\n                    <Box component={Paper} align='left'>\n                        <br></br>\n                        <br></br>\n                        <br></br>\n                        <br></br>\n                        <h1>\n                            {`${outline.faculty} ${outline.number} `}\n                            <br />\n                            {`${outline.description}`}\n                        </h1>\n                        <h2>\n                            {`${outline.term}`}\n                        </h2>\n                        <h2>\n                            {`Section: ${outline.section}`}\n                        </h2>\n                        <br></br>\n\n                        <Box border={2} align='center' width={1}>\n                            <CalendarInfo outlineID={outlineID} save={save} />\n                        </Box>\n                        <br></br>\n                        <br></br>\n\n                        <Box border={2} align='center'>\n                            <LearningOutcomes save={save} outlineID={outlineID} />\n                        </Box>\n                        <br></br>\n                        <br></br>\n\n                        <Box border={2} align='center'>\n                            <Timetable save={save} outlineID={outlineID} />\n                        </Box>\n                        <br></br>\n                        <br></br>\n\n                        <Box border={2} align='center'>\n                            <CourseInstructors save={save} outlineID={outlineID} />\n                        </Box>\n                        <br></br>\n                        <br></br>\n\n                        <Box border={2} align='center'>\n                            <Examinations save={save} outlineID={outlineID} />\n                        </Box>\n                        <br></br>\n                        <br></br>\n\n                        <Box border={2} align='center'>\n                            <UseOfCalculators save={save} outlineID={outlineID} />\n                        </Box>\n                        <br></br>\n                        <br></br>\n\n                        <Box border={2} align='center'>\n                            <FinalGradeDetermination save={save} outlineID={outlineID} />\n                        </Box>\n                        <br></br>\n                        <br></br>\n\n                        <Box border={2} align='center'>\n                            <Textbook save={save} outlineID={outlineID} />\n                        </Box>\n                        <br></br>\n                        <br></br>\n\n                        <Box border={2} align='center'>\n                            <CoursePolicies save={save} outlineID={outlineID} />\n                        </Box>\n                        <br></br>\n                        <br></br>\n\n                        <CreateSaveDialog open={save} handleSaveClose={handleSaveClose} />\n                    </Box>\n                </Box>\n            </Grid>\n        </div >\n    );\n}\n\n\nfunction CalendarInfo(props) {\n\n    const createCalendarInfo = (id, description, hours, credit, calendar_reference, outline) => {\n        return { id, description, hours, credit, calendar_reference, outline }\n    }\n\n    const { outlineID, save } = props\n    const [calendarInfo, setCalendarInfo] = useState(createCalendarInfo(null, \"\", \"\", \"\", \"\", outlineID));\n\n    const [courseDesc, setCourseDesc] = useState(calendarInfo.description);\n    const [courseHours, setCourseHours] = useState(calendarInfo.hours);\n    const [courseCredits, setCourseCredits] = useState(calendarInfo.credit);\n    const [calendarRef, setCalendarRef] = useState(calendarInfo.calendar_reference);\n\n    const getCalendarInformation = async () => {\n        try {\n            axios.get(`${baseUrl}calendarinformation/?outline=${outlineID}`)\n                .then((response) => {\n                    if (response.data.length !== 0) {\n                        console.log('calendar data found');\n                        setCalendarInfo(response.data[0]);\n                    } else {\n                        console.log('no calendar data found');\n                    }\n                })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const saveCalendarInfo = async () => {\n        if (calendarInfo.id == null) {\n            try {\n                console.log('posting calendar info')\n                axios.post(`${baseUrl}calendarinformation/`, {\n                    description: calendarInfo.description,\n                    hours: calendarInfo.hours,\n                    credit: calendarInfo.credit,\n                    calendar_reference: calendarInfo.calendar_reference,\n                    outline: outlineID\n                }\n                ).then((response) => {\n                    setCalendarInfo(response.data);\n                })\n            } catch (error) {\n                console.log(error)\n            }\n        } else {\n            try {\n                console.log('putting calendar info')\n                axios.put(`${baseUrl}calendarinformation/${calendarInfo.id}/`, {\n                    description: calendarInfo.description,\n                    hours: calendarInfo.hours,\n                    credit: calendarInfo.credit,\n                    calendar_reference: calendarInfo.calendar_reference,\n                    outline: outlineID\n                }\n                ).then((response) => {\n                    setCalendarInfo(response.data);\n                })\n            } catch (error) {\n                console.log(error)\n            }\n        }\n    }\n\n    useEffect(() => {\n        if (save == true) {\n            saveCalendarInfo();\n        }\n    }, [save])\n\n    useEffect(() => {\n        setCalendarInfo(createCalendarInfo(\n            calendarInfo.id, courseDesc, calendarInfo.hours,\n            calendarInfo.credits, calendarInfo.calendar_reference, outlineID))\n    }, [courseDesc])\n\n    useEffect(() => {\n        setCalendarInfo(createCalendarInfo(\n            calendarInfo.id, calendarInfo.description, courseHours,\n            calendarInfo.credits, calendarInfo.calendar_reference, outlineID))\n    }, [courseHours])\n\n    useEffect(() => {\n        setCalendarInfo(createCalendarInfo(\n            calendarInfo.id, calendarInfo.description, calendarInfo.hours,\n            courseCredits, calendarInfo.calendar_reference, outlineID))\n    }, [courseCredits])\n\n    useEffect(() => {\n        setCalendarInfo(createCalendarInfo(\n            calendarInfo.id, calendarInfo.description, calendarInfo.hours,\n            calendarInfo.credit, calendarRef, outlineID))\n    }, [calendarRef])\n\n    useEffect(() => {\n        getCalendarInformation();\n    }, [])\n\n    return (\n        <Box width=\"95%\" align='left'>\n            <h2>\n                1. Calendar Information\n            </h2>\n            <h3>\n                Course Description\n            </h3>\n            <TextField\n                multiline={true}\n                rows={12}\n                rowsMax={12}\n                fullWidth={true}\n                value={calendarInfo.description}\n                placeholder=\"Enter Course Description\"\n                onChange={(e) => setCourseDesc(e.target.value)}\n            />\n            <h3>\n                Course Hours\n                </h3>\n\n            <TextField\n                multiline={true}\n                value={calendarInfo.hours}\n                placeholder=\"Enter Course Hours\"\n                onChange={(e) => setCourseHours(e.target.value)}\n            />\n\n            <h3>\n                Academic Credit\n                </h3>\n            <TextField\n                multiline={true}\n                value={calendarInfo.credit}\n                placeholder=\"Enter Number of Credits\"\n                onChange={(e) => setCourseCredits(e.target.value)}\n            />\n            <h3>\n                Calendar Reference\n                </h3>\n            <TextField\n                multiline={true}\n                fullWidth={true}\n                value={calendarInfo.calendar_reference}\n                placeholder=\"Enter Calendar Reference URL\"\n                onChange={(e) => setCalendarRef(e.target.value)}\n                border={1}\n            />\n\n            <br></br>\n            <br></br>\n        </Box>\n    );\n};\n\nfunction LearningOutcomes(props) {\n\n    const { save, outlineID } = props\n\n    const createLearningOutcome = (id, number, outcome, attribute, level, outline) => {\n        return { id, number, outcome, attribute, level, outline }\n    }\n\n    const [learningOutcomes, setLearningOutcomes] = useState([createLearningOutcome(null, \"0\", \"\", \"\", \"\", outlineID)]);\n\n    const [postReady, setPostReady] = useState(false)\n\n    const getLearningOutcomes = async () => {\n        try {\n            axios.get(`${baseUrl}learningoutcomes/?outline=${outlineID}`)\n                .then((response) => {\n                    if (response.data.length !== 0) {\n                        console.log('learning outcome data found');\n                        setLearningOutcomes(response.data);\n                    } else {\n                        console.log('no learning outcome data found');\n                    }\n                })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const manageLearningOutcomes = async () => {\n\n        try {\n            axios.get(`${baseUrl}learningoutcomes/?outline=${outlineID}`)\n                .then((response) => {\n                    response.data.map((record) => {\n                    axios.delete(`${baseUrl}learningoutcomes/${record.id}/`);\n                    })\n                })\n                .then(() => {\n                    learningOutcomes.map((row) => {\n                        axios.post(`${baseUrl}learningoutcomes/`, {\n                            number: row.number,\n                            outcome: row.outcome,\n                            attribute: row.attribute,\n                            level: row.level,\n                            outline: outlineID\n                        }\n                        )\n                    })\n                }).then(() => console.log('updated learning outcomes in backend'))\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        if (save == true) {\n            manageLearningOutcomes()\n        }\n    }, [save])\n\n    useEffect(() => {\n        getLearningOutcomes();\n    }, [])\n\n\n    const setValue = (index, column, value) => {\n\n        let newRows = [...learningOutcomes]\n        newRows[index][column] = value;\n        setLearningOutcomes(newRows);\n    };\n\n    const deleteRow = (index) => {\n        let arr = [...learningOutcomes]\n        arr.splice(index, 1)\n        setLearningOutcomes(arr)\n    };\n\n    const addRow = () => {\n        let arr = [...learningOutcomes]\n        arr = arr.concat(createLearningOutcome(null, (arr.length - 1), \"\", \"\", \"\", outlineID))\n        setLearningOutcomes(arr)\n    };\n\n    const [editIdx, setEditIdx] = useState(-1);\n    const startEdit = idx => {\n        setEditIdx(idx);\n    };\n    const stopEdit = () => {\n        setEditIdx(-1);\n    };\n\n    return (\n        <Box Box width=\"95%\" align='left'>\n            <h2>\n                2. Learning Outcomes\n            </h2>\n            <div>\n                <TableContainer>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>#</TableCell>\n                                <TableCell>Learning Outcome</TableCell>\n                                <TableCell>Grade Attribute</TableCell>\n                                <TableCell>Instruction Level</TableCell>\n                                <TableCell>Edit</TableCell>\n                                <TableCell>Delete</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {learningOutcomes.map((row, index) => (\n                                <TableRow key={index}>\n                                    <TableCell align=\"left\">\n                                        {index + \"  \"}\n                                    </TableCell>\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.outcome}\n                                                onChange={(e) => setValue(index, 'outcome', e.target.value)} placeholder='Enter Learning Outcome' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.outcome}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <Select\n                                                defaultValue={row.attribute}\n                                                onChange={(e) => setValue(index, 'attribute', e.target.value)} >\n                                                <MenuItem value=\"\">\n                                                    <em>None</em>\n                                                </MenuItem>\n                                                <MenuItem value={\"A1\"}>A1</MenuItem>\n                                                <MenuItem value={\"A2\"}>A2</MenuItem>\n                                                <MenuItem value={\"A3\"}>A3</MenuItem>\n                                                <MenuItem value={\"A4\"}>A4</MenuItem>\n                                                <MenuItem value={\"A5\"}>A5</MenuItem>\n                                                <MenuItem value={\"A6\"}>A6</MenuItem>\n                                                <MenuItem value={\"A7\"}>A7</MenuItem>\n                                                <MenuItem value={\"A8\"}>A8</MenuItem>\n                                                <MenuItem value={\"A9\"}>A9</MenuItem>\n                                                <MenuItem value={\"A10\"}>A10</MenuItem>\n                                                <MenuItem value={\"A11\"}>A11</MenuItem>\n                                                <MenuItem value={\"A12\"}>A12</MenuItem>\n                                            </Select>\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.attribute}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <Select\n                                                defaultValue={row.level}\n                                                onChange={(e) => setValue(index, 'level', e.target.value)} >\n                                                <MenuItem value=\"\">\n                                                    <em>None</em>\n                                                </MenuItem>\n                                                <MenuItem value={\"I\"}>I</MenuItem>\n                                                <MenuItem value={\"D\"}>D</MenuItem>\n                                                <MenuItem value={\"A\"}>A</MenuItem>\n                                            </Select>\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.level}\n                                        </TableCell>)}\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <EditIcon onClick={() => startEdit(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CheckIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <DeleteIcon onClick={(e) => deleteRow(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CloseIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <br />\n                <div>\n                    <Button onClick={addRow} variant='contained' color='primary'>\n                        Create Row\n                            </Button>\n                </div>\n            </div>\n            <br></br>\n            <br></br>\n        </Box>\n    );\n};\n\nfunction Timetable(props) {\n\n    const { save, outlineID } = props\n\n    const createTimetable = (id, section, days, time, location, outline) => {\n        return { id, section, days, time, location, outline }\n    }\n\n    const [timetables, setTimetables] = useState([createTimetable(null, \"\", \"\", \"\", \"\", outlineID)]);\n\n    const getTimetables = async () => {\n        try {\n            axios.get(`${baseUrl}timetables/?outline=${outlineID}`)\n                .then((response) => {\n                    if (response.data.length !== 0) {\n                        console.log('timetable data found');\n                        setTimetables(response.data);\n                    } else {\n                        console.log('no timetable data found');\n                    }\n                })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const manageTimetables = async () => {\n\n        try {\n            axios.get(`${baseUrl}timetables/?outline=${outlineID}`)\n                .then((response) => {\n                    response.data.map((record) => {\n                    axios.delete(`${baseUrl}timetables/${record.id}/`);\n                    })\n                })\n                .then(() => {\n                    timetables.map((row) => {\n                        axios.post(`${baseUrl}timetables/`, {\n                            section: row.section,\n                            days: row.days,\n                            time: row.time,\n                            location: row.location,\n                            outline: outlineID\n                        }\n                        )\n                    })\n                }).then(() => console.log('timetables updated in backend'))\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        if (save == true) {\n            manageTimetables()\n        }\n    }, [save])\n\n    useEffect(() => {\n        getTimetables();\n    }, [])\n\n    const setValue = (index, column, value) => {\n        let newRows = [...timetables];\n        newRows[index][column] = value;\n        setTimetables(newRows);\n    };\n\n    const deleteRow = (index) => {\n        let arr = [...timetables]\n        arr.splice(index, 1)\n        setTimetables(arr)\n    };\n\n    const addRow = () => {\n        let arr = [...timetables]\n        arr = arr.concat(createTimetable(null, \"\", \"\", \"\", \"\", outlineID))\n        setTimetables(arr);\n    };\n\n    const [editIdx, setEditIdx] = useState(-1);\n    const startEdit = idx => {\n        setEditIdx(idx);\n    };\n    const stopEdit = () => {\n        setEditIdx(-1);\n    };\n\n    return (\n        <Box Box width=\"95%\" align='left'>\n            <h2>\n                3. Timetable\n            </h2>\n\n            <div>\n                <TableContainer>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Section</TableCell>\n                                <TableCell>Day(s) of Week</TableCell>\n                                <TableCell>Time</TableCell>\n                                <TableCell>Location</TableCell>\n                                <TableCell>Edit</TableCell>\n                                <TableCell>Delete</TableCell>\n\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {timetables.map((row, index) => (\n                                <TableRow key={index}>\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.section}\n                                                onChange={(e) => setValue(index, 'section', e.target.value)} placeholder='Enter Section' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.section}\n                                        </TableCell>)}\n\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.days}\n                                                onChange={(e) => setValue(index, 'days', e.target.value)} placeholder='Enter Day(s) of Week' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.days}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.time}\n                                                onChange={(e) => setValue(index, 'time', e.target.value)} placeholder='Enter Time' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.time}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.location}\n                                                onChange={(e) => setValue(index, 'location', e.target.value)} placeholder='Enter Location' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.location}\n                                        </TableCell>)}\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <EditIcon onClick={() => startEdit(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CheckIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <DeleteIcon onClick={(e) => deleteRow(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CloseIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n                <br />\n\n                <div>\n                    <Button onClick={addRow} variant='contained' color='primary'>\n                        Create Row\n                            </Button>\n                </div>\n            </div>\n\n            <br></br>\n            <br></br>\n        </Box>\n    );\n};\n\nfunction CourseInstructors(props) {\n\n    const { save, outlineID } = props\n\n    const createInstructor = (id, section, first_name, last_name, phone, office, email, outline) => {\n        return { id, section, first_name, last_name, phone, office, email, outline }\n    }\n\n    const [instructors, setInstructors] = useState([createInstructor(null, \"\", \"\", \"\", \"\", \"\", \"\", outlineID)]);\n\n\n    const getInstructors = async () => {\n        try {\n            axios.get(`${baseUrl}instructors/?outline=${outlineID}`)\n                .then((response) => {\n                    if (response.data.length !== 0) {\n                        console.log('instructor data found');\n                        setInstructors(response.data);\n                    } else {\n                        console.log('no instructor data found');\n                    }\n                })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const manageInstructors = async () => {\n\n        try {\n            axios.get(`${baseUrl}instructors/?outline=${outlineID}`)\n                .then((response) => {\n                    response.data.map((record) => {\n                    axios.delete(`${baseUrl}instructors/${record.id}/`);\n                    })\n                })\n                .then(() => {\n                    instructors.map((row) => {\n                        axios.post(`${baseUrl}instructors/`, {\n                            section: row.section,\n                            first_name: row.first_name,\n                            last_name: row.last_name,\n                            phone: row.phone,\n                            office: row.office,\n                            email: row.email,\n                            outline: outlineID\n                        }\n                        )\n                    })\n                }).then(() => console.log('instructors updated in backend'))\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        if (save == true) {\n            manageInstructors()\n        }\n    }, [save])\n\n    \n\n    useEffect(() => {\n        getInstructors();\n    }, [])\n\n\n    const setValue = (index, column, value) => {\n        let newRows = [...instructors];\n        newRows[index][column] = value;\n        setInstructors(newRows);\n    };\n\n    const deleteRow = (index) => {\n        let arr = [...instructors];\n        arr.splice(index, 1);\n        setInstructors(arr);\n    };\n\n    const addRow = () => {\n        let arr = [...instructors]\n        arr = arr.concat(createInstructor(null, \"\", \"\", \"\", \"\", \"\", \"\", outlineID))\n        setInstructors(arr);\n    };\n\n    const [editIdx, setEditIdx] = useState(-1);\n    const startEdit = idx => {\n        setEditIdx(idx);\n    };\n    const stopEdit = () => {\n        setEditIdx(-1);\n    };\n\n    return (\n        <Box Box width=\"95%\" align='left'>\n            <h2>\n                4. Course Instructors\n            </h2>\n\n            <div>\n                <TableContainer>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Section</TableCell>\n                                <TableCell>First Name</TableCell>\n                                <TableCell>Last Name</TableCell>\n                                <TableCell>Phone</TableCell>\n                                <TableCell>Office</TableCell>\n                                <TableCell>Email</TableCell>\n                                <TableCell>Edit</TableCell>\n                                <TableCell>Delete</TableCell>\n\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {instructors.map((row, index) => (\n                                <TableRow key={index}>\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.section}\n                                                onChange={(e) => setValue(index, 'section', e.target.value)} placeholder='Enter Section' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.section}\n                                        </TableCell>)}\n\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.first_name}\n                                                onChange={(e) => setValue(index, 'first_name', e.target.value)} placeholder='Enter First Name' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.first_name}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.last_name}\n                                                onChange={(e) => setValue(index, 'last_name', e.target.value)} placeholder='Enter Family Name' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.last_name}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.phone}\n                                                onChange={(e) => setValue(index, 'phone', e.target.value)} placeholder='Enter Phone' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.phone}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.office}\n                                                onChange={(e) => setValue(index, 'office', e.target.value)} placeholder='Enter Office' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.office}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.email}\n                                                onChange={(e) => setValue(index, 'email', e.target.value)} placeholder='Enter Email' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.email}\n                                        </TableCell>)}\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <EditIcon onClick={() => startEdit(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CheckIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <DeleteIcon onClick={(e) => deleteRow(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CloseIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n                <br />\n\n                <div>\n                    <Button onClick={addRow} variant='contained' color='primary'>\n                        Create Row\n                            </Button>\n                </div>\n            </div>\n\n            <br></br>\n            <br></br>\n        </Box>\n    );\n};\n\n\nfunction Examinations(props) {\n\n    const { save, outlineID } = props\n\n    const createExamination = (id, text, outline) => {\n        return { id, text, outline }\n    }\n\n    const [examinations, setExaminations] = useState(createExamination(null, \"\", outlineID));\n\n    const [examInfo, setExamInfo] = useState(examinations.text);\n\n    const getExaminations = async () => {\n        try {\n            axios.get(`${baseUrl}examinations/?outline=${outlineID}`)\n                .then((response) => {\n                    if (response.data.length !== 0) {\n                        console.log('examination data found');\n                        setExaminations(response.data[0]);\n                    } else {\n                        console.log('no examination data found');\n                    }\n                })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const saveExaminations = async () => {\n        if (examinations.id == null) {\n            try {\n                console.log('posting examinations')\n                axios.post(`${baseUrl}examinations/`, {\n                    text: examinations.text,\n                    outline: outlineID\n                }\n                ).then((response) => {\n                    setExaminations(response.data);\n                })\n            } catch (error) {\n                console.log(error)\n            }\n        } else {\n            try {\n                console.log('putting examinations')\n                axios.put(`${baseUrl}examinations/${examinations.id}/`, {\n                    text: examinations.text,\n                    outline: outlineID\n                }\n                ).then((response) => {\n                    setExaminations(response.data);\n                })\n            } catch (error) {\n                console.log(error)\n            }\n        }\n    }\n\n    useEffect(() => {\n        if (save == true) {\n            saveExaminations();\n        }\n    }, [save])\n\n    useEffect(() => {\n        getExaminations();\n    }, [])\n\n    useEffect(() => {\n        setExaminations(createExamination(examinations.id, examInfo, examinations.outline));\n    }, [examInfo])\n\n    return (\n        <Box Box width=\"95%\" align='left'>\n            <h2>\n                5. Examinations\n                </h2>\n            <h3>\n                Examination Information\n                </h3>\n            <TextField\n                multiline={true}\n                rows={12}\n                rowsMax={12}\n                fullWidth={true}\n                value={examinations.text}\n                placeholder=\"Enter Examination Information\"\n                onChange={(e) => setExamInfo(e.target.value)}\n            />\n            <br></br>\n            <br></br>\n        </Box>\n    );\n\n};\n\nfunction UseOfCalculators(props) {\n\n    const { save, outlineID } = props;\n\n    const createCalculator = (id, text, outline) => {\n        return { id, text, outline }\n    }\n\n    const [calculators, setCalculators] = useState(createCalculator(null, \"\", outlineID));\n\n    const [calculatorsInfo, setCalculatorsInfo] = useState(calculators.text);\n\n    const getCalculators = async () => {\n        try {\n            axios.get(`${baseUrl}calculators/?outline=${outlineID}`)\n                .then((response) => {\n                    if (response.data.length !== 0) {\n                        console.log('calculators data found');\n                        setCalculators(response.data[0]);\n                    } else {\n                        console.log('no calculators data found');\n                    }\n                })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const saveCalculators = async () => {\n        if (calculators.id == null) {\n            try {\n                console.log('posting calculators')\n                axios.post(`${baseUrl}calculators/`, {\n                    text: calculators.text,\n                    outline: outlineID\n                }\n                ).then((response) => {\n                    setCalculators(response.data);\n                })\n            } catch (error) {\n                console.log(error)\n            }\n        } else {\n            try {\n                console.log('putting calculators')\n                axios.put(`${baseUrl}calculators/${calculators.id}/`, {\n                    text: calculators.text,\n                    outline: outlineID\n                }\n                ).then((response) => {\n                    setCalculators(response.data);\n                })\n            } catch (error) {\n                console.log(error)\n            }\n        }\n    }\n\n    useEffect(() => {\n        setCalculators(createCalculator(calculators.id, calculatorsInfo, calculators.outline));\n    }, [calculatorsInfo])\n\n    useEffect(() => {\n        getCalculators();\n    }, [])\n\n    useEffect(() => {\n        if (save == true) {\n            saveCalculators();\n        }\n    }, [save])\n\n    return (\n        <Box width=\"95%\" align='left'>\n            <h2>\n                6. Use Of Calculators in Examinations\n        </h2>\n\n            <TextField\n\n                fullWidth={true}\n                placeholder=\"Enter Calculator Policy\"\n                value={calculators.text}\n                onChange={(e) => setCalculatorsInfo(e.target.value)}\n                border={1}\n            />\n\n            <br></br>\n            <br></br>\n        </Box>\n    );\n};\n\nfunction FinalGradeDetermination(props) {\n\n    const { save, outlineID } = props\n\n    const createGradeComponent = (id, component, outcomes, weight, outline) => {\n        return { id, component, outcomes, weight, outline }\n    }\n\n    const [gradeComponents, setGradeComponents] = useState([createGradeComponent(null, \"\", outlineID)]);\n\n    const getGradeComponents = async () => {\n        try {\n            axios.get(`${baseUrl}finalgradecomponents/?outline=${outlineID}`)\n                .then((response) => {\n                    if (response.data.length !== 0) {\n                        console.log('final grade component data found');\n                        setGradeComponents(response.data);\n                    } else {\n                        console.log('no final grade component data found');\n                    }\n                })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const [sum, setSum] = useState(0);\n\n    const setValue = (index, column, value) => {\n        let newRows = [...gradeComponents];\n        newRows[index][column] = value;\n        setGradeComponents(newRows);\n        updateSum();\n    };\n\n    const deleteRow = (index) => {\n        let arr = [...gradeComponents]\n        arr.splice(index, 1)\n        setGradeComponents(arr)\n        let total = 0;\n        updateSum();\n    };\n\n    const addRow = () => {\n        let arr = [...gradeComponents]\n        arr = arr.concat([createGradeComponent(null, \"\", \"\", \"\", outlineID)])\n        setGradeComponents(arr);\n    };\n\n    const updateSum = () => {\n        let total = 0;\n        for (let i = 0; i < gradeComponents.length; i++) {\n            let n = parseInt(gradeComponents[i][\"weight\"])\n            Number.isInteger(n) ?\n                (total += n) :\n                (total += 0)\n\n        };\n        setSum(total);\n    };\n    const [editIdx, setEditIdx] = useState(-1);\n    const startEdit = idx => {\n        setEditIdx(idx);\n    };\n    const stopEdit = () => {\n        setEditIdx(-1);\n    };\n\n    const manageGradeComponents = async () => {\n\n        try {\n            axios.get(`${baseUrl}finalgradecomponents/?outline=${outlineID}`)\n                .then((response) => {\n                    response.data.map((record) => {\n                    axios.delete(`${baseUrl}finalgradecomponents/${record.id}/`);\n                    })\n                })\n                .then(() => {\n                    gradeComponents.map((row) => {\n                        axios.post(`${baseUrl}finalgradecomponents/`, {\n                            component: row.component,\n                            outcomes: row.outcomes,\n                            weight: row.weight,\n                            outline: outlineID\n                        }\n                        )\n                    })\n                }).then(() => console.log('final grade components updated in backend'))\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        if (save == true) {\n            manageGradeComponents();\n        }\n    }, [save])\n\n    useEffect(() => {\n        getGradeComponents();\n    }, [])\n\n    useEffect(() => {\n        updateSum();\n    }, [gradeComponents])\n\n\n    return (\n        <Box Box width=\"95%\" align='left'>\n            <h2>\n                7. Final Grade Determination\n            </h2>\n\n            <div>\n                <TableContainer>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Component</TableCell>\n                                <TableCell>Learning Outcomes Evaluated</TableCell>\n                                <TableCell>Weight</TableCell>\n                                <TableCell>Edit</TableCell>\n                                <TableCell>Delete</TableCell>\n\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {gradeComponents.map((row, index) => (\n                                <TableRow key={index}>\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.component}\n                                                onChange={(e) => setValue(index, 'component', e.target.value)} placeholder='Enter Component' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.component}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.outcome}\n                                                onChange={(e) => setValue(index, 'outcome', e.target.value)} placeholder='Enter Outcomes' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.outcome}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.weight}\n                                                onChange={(e) => setValue(index, 'weight', e.target.value)} placeholder='Enter Weight' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.weight}\n                                        </TableCell>)}\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <EditIcon onClick={() => startEdit(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CheckIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <DeleteIcon onClick={(e) => deleteRow(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CloseIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                            <TableRow>\n                                <TableCell align=\"left\"></TableCell>\n                                <TableCell align=\"right\">Total Weight:</TableCell>\n                                <TableCell align=\"left\">{sum}</TableCell>\n                                <TableCell align=\"left\"></TableCell>\n                                <TableCell align=\"left\"></TableCell>\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n                <br />\n\n                <div>\n                    <Button onClick={addRow} variant='contained' color='primary'>\n                        Create Row\n                            </Button>\n                </div>\n            </div>\n\n            <br></br>\n            <br></br>\n        </Box>\n    );\n\n};\n\nfunction Textbook(props) {\n\n    const { save, outlineID } = props\n\n    const createTextbook = (id, title, author, year, publisher, requirement, outline) => {\n        return { id, title, author, year, publisher, requirement, outline }\n    }\n\n    const [textbooks, setTextbooks] = useState([createTextbook(null, \"\", \"\", \"\", \"\", \"\", outlineID)]);\n\n    const getTextbooks = async () => {\n        try {\n            axios.get(`${baseUrl}textbooks/?outline=${outlineID}`)\n                .then((response) => {\n                    if (response.data.length !== 0) {\n                        console.log('textbook data found');\n                        setTextbooks(response.data);\n                    } else {\n                        console.log('no textbook data found');\n                    }\n                })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const manageTextbooks = async () => {\n\n        try {\n            axios.get(`${baseUrl}textbooks/?outline=${outlineID}`)\n                .then((response) => {\n                    response.data.map((record) => {\n                    axios.delete(`${baseUrl}textbooks/${record.id}/`);\n                    })\n                })\n                .then(() => {\n                    textbooks.map((row) => {\n                        axios.post(`${baseUrl}textbooks/`, {\n                            title: row.title,\n                            author: row.author,\n                            year: row.year,\n                            publisher: row.publisher,\n                            requirement: row.requirement,\n                            outline: outlineID\n                        }\n                        )\n                    })\n                }).then(() => console.log('final grade components updated in backend'))\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        if (save == true) {\n            manageTextbooks();\n        }\n    }, [save])\n\n    useState(() => {\n        getTextbooks();\n    }, [])\n\n    const setValue = (index, column, value) => {\n        let newRows = [...textbooks];\n        newRows[index][column] = value;\n        setTextbooks(newRows);\n    };\n\n    const deleteRow = (index) => {\n        let arr = [...textbooks]\n        arr.splice(index, 1)\n        setTextbooks(arr)\n    };\n    const addRow = () => {\n        let arr = [...textbooks]\n        arr = arr.concat(createTextbook(null, \"\", \"\", \"\", \"\", \"\", outlineID))\n        setTextbooks(arr);\n    };\n    const [editIdx, setEditIdx] = useState(-1);\n    const startEdit = idx => {\n        setEditIdx(idx);\n    };\n    const stopEdit = () => {\n        setEditIdx(-1);\n    };\n\n    return (\n        <Box Box width=\"95%\" align='left'>\n            <h2>\n                8. Textbook\n            </h2>\n\n            <div>\n                <TableContainer>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Title</TableCell>\n                                <TableCell>Author</TableCell>\n                                <TableCell>Edition, Year</TableCell>\n                                <TableCell>Publisher</TableCell>\n                                <TableCell>Required/ Recommended</TableCell>\n                                <TableCell>Edit</TableCell>\n                                <TableCell>Delete</TableCell>\n\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {textbooks.map((row, index) => (\n                                <TableRow key={index}>\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.title}\n                                                onChange={(e) => setValue(index, 'title', e.target.value)} placeholder='Enter Title' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.title}\n                                        </TableCell>)}\n\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.author}\n                                                onChange={(e) => setValue(index, 'author', e.target.value)} placeholder='Enter Author' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.author}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.year}\n                                                onChange={(e) => setValue(index, 'year', e.target.value)} placeholder='Enter Edition, Year' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.year}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.publisher}\n                                                onChange={(e) => setValue(index, 'publisher', e.target.value)} placeholder='Enter Publisher' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.publisher}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <Select\n                                                defaultValue={row.requirement}\n                                                onChange={(e) => setValue(index, 'requirement', e.target.value)} >\n                                                <MenuItem value=\"\">\n                                                    <em>None</em>\n                                                </MenuItem>\n                                                <MenuItem value={\"Required\"}>Required</MenuItem>\n                                                <MenuItem value={\"Recommended\"}>Recommended</MenuItem>\n                                            </Select>\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.requirement}\n                                        </TableCell>)}\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <EditIcon onClick={() => startEdit(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CheckIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <DeleteIcon onClick={(e) => deleteRow(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CloseIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n                <br />\n\n                <div>\n                    <Button onClick={addRow} variant='contained' color='primary'>\n                        Create Row\n                            </Button>\n                </div>\n            </div>\n\n            <br></br>\n            <br></br>\n        </Box>\n    );\n};\n\nfunction CoursePolicies(props) {\n\n    const { save, outlineID } = props\n\n    const createPolicy = (id, policy, outline) => {\n        return { id, policy, outline }\n    }\n\n    const [policies, setPolicies] = useState([createPolicy(null, \"\", outlineID)]);\n\n    const getPolicies = async () => {\n        try {\n            axios.get(`${baseUrl}policies/?outline=${outlineID}`)\n                .then((response) => {\n                    if (response.data.length !== 0) {\n                        console.log('policy data found');\n                        setPolicies(response.data);\n                    } else {\n                        console.log('no policy data found');\n                    }\n                })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const managePolicies = async () => {\n\n        try {\n            axios.get(`${baseUrl}policies/?outline=${outlineID}`)\n                .then((response) => {\n                    response.data.map((record) => {\n                    axios.delete(`${baseUrl}policies/${record.id}/`);\n                    })\n                })\n                .then(() => {\n                    policies.map((row) => {\n                        axios.post(`${baseUrl}policies/`, {\n                            policy: row.policy,\n                            outline: outlineID\n                        }\n                        )\n                    })\n                }).then(() => console.log('final grade components updated in backend'))\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        if (save == true) {\n            managePolicies();\n        }\n    }, [save])\n\n    useEffect(() => {\n        getPolicies();\n    }, [])\n\n    const setValue = (index, column, value) => {\n        let newRows = [...policies];\n        newRows[index][column] = value;\n        setPolicies(newRows);\n    };\n\n    const deleteRow = (index) => {\n        let arr = [...policies]\n        arr.splice(index, 1)\n        setPolicies(arr)\n    };\n\n    const addRow = () => {\n        let arr = [...policies]\n        arr = arr.concat(createPolicy(null, \"\", outlineID))\n        setPolicies(arr);\n    };\n\n    const [editIdx, setEditIdx] = useState(-1);\n    const startEdit = idx => {\n        setEditIdx(idx);\n    };\n    const stopEdit = () => {\n        setEditIdx(-1);\n    };\n\n    return (\n        <Box Box width=\"95%\" align='left'>\n            <h2>\n                9. Course Policies\n            </h2>\n\n            <div>\n                <TableContainer>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Policy</TableCell>\n                                <TableCell>Edit</TableCell>\n                                <TableCell>Delete</TableCell>\n\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {policies.map((row, index) => (\n                                <TableRow key={index}>\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.policy}\n                                                multiline={true}\n                                                rows={12}\n                                                rowsMax={12}\n                                                fullWidth={true}\n                                                onChange={(e) => setValue(index, 'policy', e.target.value)} placeholder='Enter Policy' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.policy}\n                                        </TableCell>)}\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <EditIcon onClick={() => startEdit(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CheckIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <DeleteIcon onClick={(e) => deleteRow(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CloseIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n                <br />\n\n                <div>\n                    <Button onClick={addRow} variant='contained' color='primary'>\n                        Create Row\n                            </Button>\n                </div>\n            </div>\n\n            <br></br>\n            <br></br>\n        </Box>\n    );\n};\n\nfunction MenuBar({ handleSaveOpen, handleSave }) {\n\n    const classes = useStyles()\n\n    return (\n        <AppBar Position='static'>\n            <Toolbar>\n            \n                    <Box >\n                        <h1>\n                            Course Outline Builder\n                        </h1>\n                    </Box>\n                    \n                    <Box className={classes.toolbarButtons}>\n                        <ButtonGroup variant=\"contained\" color=\"secondary\" aria-label=\"outlined primary button group\" >\n                            <Button variant=\"contained\" color=\"secondary\" onClick={handleSave} align=\"left\">\n                                Save\n                            </Button>\n                            <Button component={ Link } to=\"/\" variant=\"contained\" color=\"secondary\" align=\"left\">\n                                Home\n                            </Button>\n                        </ButtonGroup>\n                    </Box>\n\n                \n            </Toolbar>\n        </AppBar>\n\n\n\n    );\n};\n\nfunction CreateSaveDialog({ open, handleSaveClose }) {\n    return (\n        <Dialog open={false}>\n            <DialogTitle>\n                Outline Created\n        </DialogTitle>\n            <DialogContent>\n                <Box>\n                    <body>\n                        This is a dummy button to demonstrate that the inputs will be recorded into a database.\n            </body>\n                </Box>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleSaveClose} color=\"primary\">\n                    Cancel\n                 </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};",{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":178,"column":6,"nodeType":"87","endLine":178,"endColumn":12,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":290,"column":9,"nodeType":"91","messageId":"92","endLine":290,"endColumn":22},{"ruleId":"85","severity":1,"message":"93","line":308,"column":6,"nodeType":"87","endLine":308,"endColumn":20,"suggestions":"94"},{"ruleId":"89","severity":1,"message":"95","line":44,"column":11,"nodeType":"91","messageId":"92","endLine":44,"endColumn":18},{"ruleId":"89","severity":1,"message":"96","line":48,"column":23,"nodeType":"91","messageId":"92","endLine":48,"endColumn":35},{"ruleId":"85","severity":1,"message":"97","line":66,"column":8,"nodeType":"87","endLine":66,"endColumn":10,"suggestions":"98"},{"ruleId":"99","severity":1,"message":"100","line":232,"column":18,"nodeType":"101","messageId":"102","endLine":232,"endColumn":20},{"ruleId":"85","severity":1,"message":"103","line":235,"column":8,"nodeType":"87","endLine":235,"endColumn":14,"suggestions":"104"},{"ruleId":"85","severity":1,"message":"105","line":241,"column":8,"nodeType":"87","endLine":241,"endColumn":20,"suggestions":"106"},{"ruleId":"85","severity":1,"message":"107","line":247,"column":8,"nodeType":"87","endLine":247,"endColumn":21,"suggestions":"108"},{"ruleId":"85","severity":1,"message":"109","line":253,"column":8,"nodeType":"87","endLine":253,"endColumn":23,"suggestions":"110"},{"ruleId":"85","severity":1,"message":"111","line":259,"column":8,"nodeType":"87","endLine":259,"endColumn":21,"suggestions":"112"},{"ruleId":"85","severity":1,"message":"113","line":263,"column":8,"nodeType":"87","endLine":263,"endColumn":10,"suggestions":"114"},{"ruleId":"89","severity":1,"message":"115","line":330,"column":12,"nodeType":"91","messageId":"92","endLine":330,"endColumn":21},{"ruleId":"89","severity":1,"message":"116","line":330,"column":23,"nodeType":"91","messageId":"92","endLine":330,"endColumn":35},{"ruleId":"117","severity":1,"message":"118","line":353,"column":48,"nodeType":"119","messageId":"120","endLine":353,"endColumn":50},{"ruleId":"117","severity":1,"message":"118","line":358,"column":48,"nodeType":"119","messageId":"120","endLine":358,"endColumn":50},{"ruleId":"99","severity":1,"message":"100","line":376,"column":18,"nodeType":"101","messageId":"102","endLine":376,"endColumn":20},{"ruleId":"85","severity":1,"message":"121","line":379,"column":8,"nodeType":"87","endLine":379,"endColumn":14,"suggestions":"122"},{"ruleId":"85","severity":1,"message":"123","line":383,"column":8,"nodeType":"87","endLine":383,"endColumn":10,"suggestions":"124"},{"ruleId":"117","severity":1,"message":"118","line":549,"column":48,"nodeType":"119","messageId":"120","endLine":549,"endColumn":50},{"ruleId":"117","severity":1,"message":"118","line":554,"column":42,"nodeType":"119","messageId":"120","endLine":554,"endColumn":44},{"ruleId":"99","severity":1,"message":"100","line":571,"column":18,"nodeType":"101","messageId":"102","endLine":571,"endColumn":20},{"ruleId":"85","severity":1,"message":"125","line":574,"column":8,"nodeType":"87","endLine":574,"endColumn":14,"suggestions":"126"},{"ruleId":"85","severity":1,"message":"127","line":578,"column":8,"nodeType":"87","endLine":578,"endColumn":10,"suggestions":"128"},{"ruleId":"117","severity":1,"message":"118","line":729,"column":48,"nodeType":"119","messageId":"120","endLine":729,"endColumn":50},{"ruleId":"117","severity":1,"message":"118","line":734,"column":43,"nodeType":"119","messageId":"120","endLine":734,"endColumn":45},{"ruleId":"99","severity":1,"message":"100","line":753,"column":18,"nodeType":"101","messageId":"102","endLine":753,"endColumn":20},{"ruleId":"85","severity":1,"message":"129","line":756,"column":8,"nodeType":"87","endLine":756,"endColumn":14,"suggestions":"130"},{"ruleId":"85","severity":1,"message":"131","line":762,"column":8,"nodeType":"87","endLine":762,"endColumn":10,"suggestions":"132"},{"ruleId":"99","severity":1,"message":"100","line":960,"column":18,"nodeType":"101","messageId":"102","endLine":960,"endColumn":20},{"ruleId":"85","severity":1,"message":"133","line":963,"column":8,"nodeType":"87","endLine":963,"endColumn":14,"suggestions":"134"},{"ruleId":"85","severity":1,"message":"135","line":967,"column":8,"nodeType":"87","endLine":967,"endColumn":10,"suggestions":"136"},{"ruleId":"85","severity":1,"message":"137","line":971,"column":8,"nodeType":"87","endLine":971,"endColumn":18,"suggestions":"138"},{"ruleId":"85","severity":1,"message":"139","line":1057,"column":8,"nodeType":"87","endLine":1057,"endColumn":25,"suggestions":"140"},{"ruleId":"85","severity":1,"message":"141","line":1061,"column":8,"nodeType":"87","endLine":1061,"endColumn":10,"suggestions":"142"},{"ruleId":"99","severity":1,"message":"100","line":1064,"column":18,"nodeType":"101","messageId":"102","endLine":1064,"endColumn":20},{"ruleId":"85","severity":1,"message":"143","line":1067,"column":8,"nodeType":"87","endLine":1067,"endColumn":14,"suggestions":"144"},{"ruleId":"89","severity":1,"message":"145","line":1129,"column":13,"nodeType":"91","messageId":"92","endLine":1129,"endColumn":18},{"ruleId":"117","severity":1,"message":"118","line":1163,"column":48,"nodeType":"119","messageId":"120","endLine":1163,"endColumn":50},{"ruleId":"117","severity":1,"message":"118","line":1168,"column":47,"nodeType":"119","messageId":"120","endLine":1168,"endColumn":49},{"ruleId":"99","severity":1,"message":"100","line":1184,"column":18,"nodeType":"101","messageId":"102","endLine":1184,"endColumn":20},{"ruleId":"85","severity":1,"message":"146","line":1187,"column":8,"nodeType":"87","endLine":1187,"endColumn":14,"suggestions":"147"},{"ruleId":"85","severity":1,"message":"148","line":1191,"column":8,"nodeType":"87","endLine":1191,"endColumn":10,"suggestions":"149"},{"ruleId":"85","severity":1,"message":"150","line":1195,"column":8,"nodeType":"87","endLine":1195,"endColumn":25,"suggestions":"151"},{"ruleId":"117","severity":1,"message":"118","line":1318,"column":48,"nodeType":"119","messageId":"120","endLine":1318,"endColumn":50},{"ruleId":"117","severity":1,"message":"118","line":1323,"column":41,"nodeType":"119","messageId":"120","endLine":1323,"endColumn":43},{"ruleId":"99","severity":1,"message":"100","line":1341,"column":18,"nodeType":"101","messageId":"102","endLine":1341,"endColumn":20},{"ruleId":"85","severity":1,"message":"152","line":1344,"column":8,"nodeType":"87","endLine":1344,"endColumn":14,"suggestions":"153"},{"ruleId":"117","severity":1,"message":"118","line":1512,"column":48,"nodeType":"119","messageId":"120","endLine":1512,"endColumn":50},{"ruleId":"117","severity":1,"message":"118","line":1517,"column":40,"nodeType":"119","messageId":"120","endLine":1517,"endColumn":42},{"ruleId":"99","severity":1,"message":"100","line":1531,"column":18,"nodeType":"101","messageId":"102","endLine":1531,"endColumn":20},{"ruleId":"85","severity":1,"message":"154","line":1534,"column":8,"nodeType":"87","endLine":1534,"endColumn":14,"suggestions":"155"},{"ruleId":"85","severity":1,"message":"156","line":1538,"column":8,"nodeType":"87","endLine":1538,"endColumn":10,"suggestions":"157"},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'itemSelected' and 'outlines'. Either include them or remove the dependency array. If 'setFaculty' needs the current value of 'outlines', you can also switch to useReducer instead of useState and read 'outlines' in the reducer.","ArrayExpression",["160"],"no-unused-vars","'createOutline' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'outlines'. Either include it or remove the dependency array.",["161"],"'classes' is assigned a value but never used.","'setOutlineID' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getOutline' and 'outlineID'. Either include them or remove the dependency array.",["162"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'saveCalendarInfo'. Either include it or remove the dependency array.",["163"],"React Hook useEffect has missing dependencies: 'calendarInfo.calendar_reference', 'calendarInfo.credits', 'calendarInfo.hours', 'calendarInfo.id', and 'outlineID'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCalendarInfo' needs the current value of 'calendarInfo.id'.",["164"],"React Hook useEffect has missing dependencies: 'calendarInfo.calendar_reference', 'calendarInfo.credits', 'calendarInfo.description', 'calendarInfo.id', and 'outlineID'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCalendarInfo' needs the current value of 'calendarInfo.id'.",["165"],"React Hook useEffect has missing dependencies: 'calendarInfo.calendar_reference', 'calendarInfo.description', 'calendarInfo.hours', 'calendarInfo.id', and 'outlineID'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCalendarInfo' needs the current value of 'calendarInfo.id'.",["166"],"React Hook useEffect has missing dependencies: 'calendarInfo.credit', 'calendarInfo.description', 'calendarInfo.hours', 'calendarInfo.id', and 'outlineID'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCalendarInfo' needs the current value of 'calendarInfo.id'.",["167"],"React Hook useEffect has a missing dependency: 'getCalendarInformation'. Either include it or remove the dependency array.",["168"],"'postReady' is assigned a value but never used.","'setPostReady' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'manageLearningOutcomes'. Either include it or remove the dependency array.",["169"],"React Hook useEffect has a missing dependency: 'getLearningOutcomes'. Either include it or remove the dependency array.",["170"],"React Hook useEffect has a missing dependency: 'manageTimetables'. Either include it or remove the dependency array.",["171"],"React Hook useEffect has a missing dependency: 'getTimetables'. Either include it or remove the dependency array.",["172"],"React Hook useEffect has a missing dependency: 'manageInstructors'. Either include it or remove the dependency array.",["173"],"React Hook useEffect has a missing dependency: 'getInstructors'. Either include it or remove the dependency array.",["174"],"React Hook useEffect has a missing dependency: 'saveExaminations'. Either include it or remove the dependency array.",["175"],"React Hook useEffect has a missing dependency: 'getExaminations'. Either include it or remove the dependency array.",["176"],"React Hook useEffect has missing dependencies: 'examinations.id' and 'examinations.outline'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setExaminations' needs the current value of 'examinations.id'.",["177"],"React Hook useEffect has missing dependencies: 'calculators.id' and 'calculators.outline'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCalculators' needs the current value of 'calculators.id'.",["178"],"React Hook useEffect has a missing dependency: 'getCalculators'. Either include it or remove the dependency array.",["179"],"React Hook useEffect has a missing dependency: 'saveCalculators'. Either include it or remove the dependency array.",["180"],"'total' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'manageGradeComponents'. Either include it or remove the dependency array.",["181"],"React Hook useEffect has a missing dependency: 'getGradeComponents'. Either include it or remove the dependency array.",["182"],"React Hook useEffect has a missing dependency: 'updateSum'. Either include it or remove the dependency array.",["183"],"React Hook useEffect has a missing dependency: 'manageTextbooks'. Either include it or remove the dependency array.",["184"],"React Hook useEffect has a missing dependency: 'managePolicies'. Either include it or remove the dependency array.",["185"],"React Hook useEffect has a missing dependency: 'getPolicies'. Either include it or remove the dependency array.",["186"],"no-global-assign","no-unsafe-negation",{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},"Update the dependencies array to be: [itemSelected, open, outlines]",{"range":"241","text":"242"},"Update the dependencies array to be: [itemSelected, outlines]",{"range":"243","text":"244"},"Update the dependencies array to be: [getOutline, outlineID]",{"range":"245","text":"246"},"Update the dependencies array to be: [save, saveCalendarInfo]",{"range":"247","text":"248"},"Update the dependencies array to be: [calendarInfo.calendar_reference, calendarInfo.credits, calendarInfo.hours, calendarInfo.id, courseDesc, outlineID]",{"range":"249","text":"250"},"Update the dependencies array to be: [calendarInfo.calendar_reference, calendarInfo.credits, calendarInfo.description, calendarInfo.id, courseHours, outlineID]",{"range":"251","text":"252"},"Update the dependencies array to be: [calendarInfo.calendar_reference, calendarInfo.description, calendarInfo.hours, calendarInfo.id, courseCredits, outlineID]",{"range":"253","text":"254"},"Update the dependencies array to be: [calendarInfo.credit, calendarInfo.description, calendarInfo.hours, calendarInfo.id, calendarRef, outlineID]",{"range":"255","text":"256"},"Update the dependencies array to be: [getCalendarInformation]",{"range":"257","text":"258"},"Update the dependencies array to be: [manageLearningOutcomes, save]",{"range":"259","text":"260"},"Update the dependencies array to be: [getLearningOutcomes]",{"range":"261","text":"262"},"Update the dependencies array to be: [manageTimetables, save]",{"range":"263","text":"264"},"Update the dependencies array to be: [getTimetables]",{"range":"265","text":"266"},"Update the dependencies array to be: [manageInstructors, save]",{"range":"267","text":"268"},"Update the dependencies array to be: [getInstructors]",{"range":"269","text":"270"},"Update the dependencies array to be: [save, saveExaminations]",{"range":"271","text":"272"},"Update the dependencies array to be: [getExaminations]",{"range":"273","text":"274"},"Update the dependencies array to be: [examInfo, examinations.id, examinations.outline]",{"range":"275","text":"276"},"Update the dependencies array to be: [calculators.id, calculators.outline, calculatorsInfo]",{"range":"277","text":"278"},"Update the dependencies array to be: [getCalculators]",{"range":"279","text":"280"},"Update the dependencies array to be: [save, saveCalculators]",{"range":"281","text":"282"},"Update the dependencies array to be: [manageGradeComponents, save]",{"range":"283","text":"284"},"Update the dependencies array to be: [getGradeComponents]",{"range":"285","text":"286"},"Update the dependencies array to be: [gradeComponents, updateSum]",{"range":"287","text":"288"},"Update the dependencies array to be: [manageTextbooks, save]",{"range":"289","text":"290"},"Update the dependencies array to be: [managePolicies, save]",{"range":"291","text":"292"},"Update the dependencies array to be: [getPolicies]",{"range":"293","text":"294"},[5630,5636],"[itemSelected, open, outlines]",[9272,9286],"[itemSelected, outlines]",[2203,2205],"[getOutline, outlineID]",[8425,8431],"[save, saveCalendarInfo]",[8647,8659],"[calendarInfo.calendar_reference, calendarInfo.credits, calendarInfo.hours, calendarInfo.id, courseDesc, outlineID]",[8882,8895],"[calendarInfo.calendar_reference, calendarInfo.credits, calendarInfo.description, calendarInfo.id, courseHours, outlineID]",[9118,9133],"[calendarInfo.calendar_reference, calendarInfo.description, calendarInfo.hours, calendarInfo.id, courseCredits, outlineID]",[9342,9355],"[calendarInfo.credit, calendarInfo.description, calendarInfo.hours, calendarInfo.id, calendarRef, outlineID]",[9421,9423],"[getCalendarInformation]",[13076,13082],"[manageLearningOutcomes, save]",[13145,13147],"[getLearningOutcomes]",[21790,21796],"[manageTimetables, save]",[21853,21855],"[getTimetables]",[29188,29194],"[manageInstructors, save]",[29258,29260],"[getInstructors]",[37768,37774],"[save, saveExaminations]",[37833,37835],"[getExaminations]",[37960,37970],"[examInfo, examinations.id, examinations.outline]",[40550,40567],"[calculators.id, calculators.outline, calculatorsInfo]",[40625,40627],"[getCalculators]",[40728,40734],"[save, saveCalculators]",[44269,44275],"[manageGradeComponents, save]",[44337,44339],"[getGradeComponents]",[44392,44409],"[gradeComponents, updateSum]",[50862,50868],"[manageTextbooks, save]",[58970,58976],"[managePolicies, save]",[59031,59033],"[getPolicies]"]